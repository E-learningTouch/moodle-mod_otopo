{"version":3,"file":"participant_selector.min.js","sources":["../src/participant_selector.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Custom auto-complete adapter to load users from the assignment list_participants webservice.\n *\n * @module     mod_assign/participants_selector\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['core/ajax', 'jquery', 'core/templates'], function(ajax, $, templates) {\n\n    return /** @alias module:mod_otopo/participants_selector */ {\n\n        // Public variables and functions.\n        /**\n         * Process the results returned from transport (convert to value + label)\n         *\n         * @method processResults\n         * @param {String} selector\n         * @param {Array} data\n         * @return {Array}\n         */\n        processResults: function(selector, data) {\n            return data;\n        },\n\n        /**\n         * Fetch results based on the current query. This also renders each result from a template before returning them.\n         *\n         * @method transport\n         * @param {String} selector Selector for the original select element\n         * @param {String} query Current search string\n         * @param {Function} success Success handler\n         * @param {Function} failure Failure handler\n         */\n        transport: function(selector, query, success, failure) {\n            var otopoid = $(selector).attr('data-otopoid');\n\n            ajax.call([{\n                methodname: 'mod_otopo_list_participants',\n                args: {\n                    otopo: otopoid,\n                    filter: query,\n                    limit: 30\n                }\n            }])[0].then(function(results) {\n                var promises = [];\n                var identityfields = $('[data-showuseridentity]').data('showuseridentity').split(',');\n\n                // We got the results, now we loop over them and render each one from a template.\n                $.each(results, function(index, user) {\n                    var ctx = user,\n                        identity = [],\n                        show = true;\n\n                    if (show) {\n                        $.each(identityfields, function(i, k) {\n                            if (typeof user[k] !== 'undefined' && user[k] !== '') {\n                                ctx.hasidentity = true;\n                                identity.push(user[k]);\n                            }\n                        });\n                        ctx.identity = identity.join(', ');\n                        promises.push(templates.render('mod_assign/list_participant_user_summary', ctx).then(function(html) {\n                            return {value: user.id, label: html};\n                        }));\n                    }\n                });\n                // Do the dance for $.when()\n                return $.when.apply($, promises);\n            }).then(function() {\n                var users = [];\n\n                // Determine if we've been passed any arguments..\n                if (arguments[0]) {\n                    // Undo the $.when() dance from arguments object into an array..\n                    users = Array.prototype.slice.call(arguments);\n                }\n\n                success(users);\n                return;\n            }).catch(failure);\n        }\n    };\n});\n"],"names":["define","ajax","$","templates","processResults","selector","data","transport","query","success","failure","otopoid","attr","call","methodname","args","otopo","filter","limit","then","results","promises","identityfields","split","each","index","user","ctx","identity","i","k","hasidentity","push","join","render","html","value","id","label","when","apply","users","arguments","Array","prototype","slice","catch"],"mappings":"AAsBAA,OAAO,iCAAA,CAAC,YAAa,SAAU,mBAAmB,SAASC,EAAMC,EAAGC,GAEhE,MAA4D,CAWxDC,eAAgB,SAASC,EAAUC,GAC/B,OAAOA,CACX,EAWAC,UAAW,SAASF,EAAUG,EAAOC,EAASC,GAC1C,IAAIC,EAAUT,EAAEG,GAAUO,KAAK,gBAE/BX,EAAKY,KAAK,CAAC,CACPC,WAAY,8BACZC,KAAM,CACFC,MAAOL,EACPM,OAAQT,EACRU,MAAO,OAEX,GAAGC,MAAK,SAASC,GACjB,IAAIC,EAAW,GACXC,EAAiBpB,EAAE,2BAA2BI,KAAK,oBAAoBiB,MAAM,KAsBjF,OAnBArB,EAAEsB,KAAKJ,GAAS,SAASK,EAAOC,GAC5B,IAAIC,EAAMD,EACNE,EAAW,GAIX1B,EAAEsB,KAAKF,GAAgB,SAASO,EAAGC,QACR,IAAZJ,EAAKI,IAAkC,KAAZJ,EAAKI,KACvCH,EAAII,aAAc,EAClBH,EAASI,KAAKN,EAAKI,IAE3B,IACAH,EAAIC,SAAWA,EAASK,KAAK,MAC7BZ,EAASW,KAAK7B,EAAU+B,OAAO,2CAA4CP,GAAKR,MAAK,SAASgB,GAC1F,MAAO,CAACC,MAAOV,EAAKW,GAAIC,MAAOH,EACnC,IAER,IAEOjC,EAAEqC,KAAKC,MAAMtC,EAAGmB,EAC3B,IAAGF,MAAK,WACJ,IAAIsB,EAAQ,GASZ,OANIC,UAAU,KAEVD,EAAQE,MAAMC,UAAUC,MAAMhC,KAAK6B,iBAGvCjC,EAAQgC,EAEZ,IAAGK,MAAMpC,EACb,EAER"}