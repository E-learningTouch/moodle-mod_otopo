{"version":3,"file":"grading_panel.min.js","sources":["../src/grading_panel.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript controller for the \"Grading\" panel at the right of the page.\n *\n * @module     mod_assign/grading_panel\n * @class      GradingPanel\n * @copyright  2016 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      3.1\n */\ndefine(['jquery', 'core/yui', 'core/notification', 'core/templates', 'core/fragment',\n        'core/ajax', 'core/str', 'mod_assign/grading_form_change_checker',\n        'mod_assign/grading_events', 'core/event'],\n       function($, Y, notification, templates, fragment, ajax, str, checker, GradingEvents, Event) {\n\n    /**\n     * GradingPanel class.\n     *\n     * @class GradingPanel\n     * @param {String} selector The selector for the page region containing the user navigation.\n     */\n    var GradingPanel = function(selector) {\n        this._regionSelector = selector;\n        this._region = $(selector);\n        this._userCache = [];\n\n        this.registerEventListeners();\n    };\n\n    /** @type {String} Selector for the page region containing the user navigation. */\n    GradingPanel.prototype._regionSelector = null;\n\n    /** @type {Number} Remember the last user id to prevent unnessecary reloads. */\n    GradingPanel.prototype._lastUserId = 0;\n\n    /** @type {Number} Remember the last session id to prevent unnessecary reloads. */\n    GradingPanel.prototype._lastSession = 0;\n\n    /** @type {JQuery} JQuery node for the page region containing the user navigation. */\n    GradingPanel.prototype._region = null;\n\n     /** @type {Number} The id of the next user in the grading list */\n    GradingPanel.prototype.nextUserId = null;\n\n     /** @type {Boolean} Next user exists in the grading list */\n    GradingPanel.prototype.nextUser = false;\n\n    /**\n     * Fade the dom node out, update it, and fade it back.\n     *\n     * @private\n     * @method _niceReplaceNodeContents\n     * @param {JQuery} node\n     * @param {String} html\n     * @param {String} js\n     * @return {Deferred} promise resolved when the animations are complete.\n     */\n    GradingPanel.prototype._niceReplaceNodeContents = function(node, html, js) {\n        var promise = $.Deferred();\n\n        node.fadeOut(\"fast\", function() {\n            templates.replaceNodeContents(node, html, js);\n            node.fadeIn(\"fast\", function() {\n                promise.resolve();\n            });\n        });\n\n        return promise.promise();\n    };\n\n    /**\n     * Make sure all form fields have the latest saved state.\n     * @private\n     * @method _saveFormState\n     */\n    GradingPanel.prototype._saveFormState = function() {\n        // Copy data from notify students checkbox which was moved out of the form.\n        var checked = $('[data-region=\"grading-actions-form\"] [name=\"sendstudentnotifications\"]').prop(\"checked\");\n        $('.gradeform [name=\"sendstudentnotifications\"]').val(checked);\n    };\n\n    /**\n     * Make form submit via ajax.\n     *\n     * @private\n     * @param {Object} event\n     * @param {Number} nextUserId\n     * @param {Boolean} nextUser optional. Load next user in the grading list.\n     * @method _submitForm\n     */\n    GradingPanel.prototype._submitForm = function(event, nextUserId, nextUser) {\n        // The form was submitted - send it via ajax instead.\n        var form = $(this._region.find('form.gradeform'));\n\n        $('[data-region=\"overlay\"]').show();\n\n        // We call this, so other modules can update the form with the latest state.\n        form.trigger('save-form-state');\n\n        // Tell all form fields we are about to submit the form.\n        Event.notifyFormSubmitAjax(form[0]);\n\n        // Now we get all the current values from the form.\n        var data = form.serialize();\n        var otopoid = this._region.attr('data-otopoid');\n        var itemsComments = [];\n        this._region.find('.grade-item textarea').each(function() {\n            if ($(this).val()) {\n                itemsComments.push({id: $(this).data('item'), value: $(this).val()});\n            }\n        });\n\n        // Now we can continue...\n        ajax.call([{\n            methodname: 'mod_otopo_submit_grading_form',\n            args: {otopo: otopoid, userid: this._lastUserId, session: this._lastSession, jsonformdata: JSON.stringify(data),\n                   itemscomments: itemsComments},\n            done: this._handleFormSubmissionResponse.bind(this, data, nextUserId, nextUser),\n            fail: notification.exception\n        }]);\n    };\n\n    /**\n     * Handle form submission response.\n     *\n     * @private\n     * @method _handleFormSubmissionResponse\n     * @param {Array} formdata - submitted values\n     * @param {Number} nextUserId - optional. The id of the user to load after the form is saved.\n     * @param {Boolean} nextUser - optional. If true, switch to next user in the grading list.\n     * @param {Array} response List of errors.\n     */\n    GradingPanel.prototype._handleFormSubmissionResponse = function(formdata, nextUserId, nextUser, response) {\n        if (typeof nextUserId === \"undefined\") {\n            nextUserId = this._lastUserId;\n        }\n        if (response.length) {\n            // There was an error saving the grade. Re-render the form using the submitted data so we can show\n            // validation errors.\n            $(document).trigger('reset', [this._lastUserId, this._lastSession, formdata]);\n        } else {\n            str.get_strings([\n                {key: 'changessaved', component: 'core'},\n                {key: 'gradechangessaveddetail', component: 'mod_assign'},\n            ]).done(function(strs) {\n                notification.alert(strs[0], strs[1]);\n            }).fail(notification.exception);\n            Y.use('moodle-core-formchangechecker', function() {\n                M.core_formchangechecker.reset_form_dirty_state();\n            });\n            if (nextUserId == this._lastUserId) {\n                $(document).trigger('reset', [nextUserId, this._lastSession]);\n            } else if (nextUser) {\n                $(document).trigger('done-saving-show-next', true);\n            } else {\n                $(document).trigger('user-changed', nextUserId);\n            }\n        }\n        $('[data-region=\"overlay\"]').hide();\n    };\n\n    /**\n     * Refresh form with default values.\n     *\n     * @private\n     * @method _resetForm\n     * @param {Event} e\n     * @param {Number} userid\n     * @param {Number} session\n     * @param {Array} formdata\n     */\n    GradingPanel.prototype._resetForm = function(e, userid, session, formdata) {\n        // The form was cancelled - refresh with default values.\n        var event = $.Event(\"custom\");\n        if (typeof userid == \"undefined\") {\n            userid = this._lastUserId;\n        }\n        this._lastUserId = 0;\n        if (typeof session == \"undefined\") {\n            session = this._lastSession;\n        }\n        this._refreshGradingPanel(event, userid, session, formdata, function() {\n            $(document).trigger('session-changed', [userid, session, false, true]);\n        });\n    };\n\n    /**\n     * Add popout buttons\n     *\n     * @private\n     * @method _addPopoutButtons\n     * @param {JQuery} selector The region selector to add popout buttons to.\n     */\n    GradingPanel.prototype._addPopoutButtons = function(selector) {\n        var region = $(selector);\n\n        templates.render('mod_assign/popout_button', {}).done(function(html) {\n            var parents = region.find('[data-fieldtype=\"filemanager\"],[data-fieldtype=\"editor\"],[data-fieldtype=\"grading\"]')\n                    .closest('.fitem');\n            parents.addClass('has-popout').find('label').parent().append(html);\n\n            region.on('click', '[data-region=\"popout-button\"]', this._togglePopout.bind(this));\n        }.bind(this)).fail(notification.exception);\n    };\n\n    /**\n     * Make a div \"popout\" or \"popback\".\n     *\n     * @private\n     * @method _togglePopout\n     * @param {Event} event\n     */\n    GradingPanel.prototype._togglePopout = function(event) {\n        event.preventDefault();\n        var container = $(event.target).closest('.fitem');\n        if (container.hasClass('popout')) {\n            $('.popout').removeClass('popout');\n        } else {\n            $('.popout').removeClass('popout');\n            container.addClass('popout');\n            container.addClass('moodle-has-zindex');\n        }\n    };\n\n    /**\n     * Get the user context - re-render the template in the page.\n     *\n     * @private\n     * @method _refreshGradingPanel\n     * @param {Event} event\n     * @param {Number} userid\n     * @param {Number} session\n     * @param {String} submissiondata serialised submission data.\n     * @param {CallableFunction} callbackUserLoaded\n     */\n    GradingPanel.prototype._refreshGradingPanel = function(event, userid, session, submissiondata,\n                                                           callbackUserLoaded = null) {\n        var contextid = this._region.attr('data-contextid');\n\n        if (typeof submissiondata === 'undefined') {\n            submissiondata = '';\n        }\n        // Skip reloading if it is the same user.\n        if (this._lastUserId == userid && this._lastSession == session && submissiondata === '') {\n            return;\n        }\n        this._lastUserId = userid;\n        this._lastSession = session;\n        $(document).trigger('start-loading-user');\n        // Tell behat to back off too.\n        window.M.util.js_pending('mod-assign-loading-user');\n        // First insert the loading template.\n        templates.render('mod_assign/loading', {}).done(function(html, js) {\n            // Update the page.\n            this._niceReplaceNodeContents(this._region, html, js).done(function() {\n                if (userid > 0) {\n                    this._region.show();\n                    // Reload the grading form \"fragment\" for this user.\n                    var params = {\n                        userid: userid,\n                        session: session,\n                        jsonformdata: JSON.stringify(submissiondata)\n                    };\n                    fragment.loadFragment('mod_otopo', 'gradingpanel', contextid, params).done(function(html, js) {\n                        this._niceReplaceNodeContents(this._region, html, js)\n                        .done(function() {\n                            checker.saveFormState('[data-region=\"grade-panel\"] .gradeform');\n                            $(document).on('editor-content-restored', function() {\n                                // If the editor has some content that has been restored\n                                // then save the form state again for comparison.\n                                checker.saveFormState('[data-region=\"grade-panel\"] .gradeform');\n                            });\n                            this._addPopoutButtons('[data-region=\"grade-panel\"] .gradeform');\n                            $(document).trigger('finish-loading-user');\n                            if (callbackUserLoaded !== null && typeof callbackUserLoaded === 'function') {\n                                callbackUserLoaded();\n                            }\n                            // Tell behat we are friends again.\n                            window.M.util.js_complete('mod-assign-loading-user');\n                        }.bind(this))\n                        .fail(notification.exception);\n                    }.bind(this)).fail(notification.exception);\n                    $('[data-region=\"review-panel\"]').show();\n                } else {\n                    this._region.hide();\n                    $('[data-region=\"review-panel\"]').hide();\n                    $(document).trigger('finish-loading-user');\n                    // Tell behat we are friends again.\n                    window.M.util.js_complete('mod-assign-loading-user');\n                }\n            }.bind(this));\n        }.bind(this)).fail(notification.exception);\n    };\n\n    /**\n     * Get next user data and store it in global variables\n     *\n     * @private\n     * @method _getNextUser\n     * @param {Event} event\n     * @param {Object} data Next user's data\n     */\n    GradingPanel.prototype._getNextUser = function(event, data) {\n        this.nextUserId = data.nextUserId;\n        this.nextUser = data.nextUser;\n    };\n\n    /**\n     * Handle the save-and-show-next event\n     *\n     * @private\n     * @method _handleSaveAndShowNext\n     */\n    GradingPanel.prototype._handleSaveAndShowNext = function() {\n        this._submitForm(null, this.nextUserId, this.nextUser);\n    };\n\n    /**\n     * Get the grade panel element.\n     *\n     * @method getPanelElement\n     * @return {jQuery}\n     */\n    GradingPanel.prototype.getPanelElement = function() {\n        return $('[data-region=\"grade-panel\"]');\n    };\n\n    /**\n     * Hide the grade panel.\n     *\n     * @method collapsePanel\n     */\n    GradingPanel.prototype.collapsePanel = function() {\n        this.getPanelElement().addClass('collapsed');\n    };\n\n    /**\n     * Show the grade panel.\n     *\n     * @method expandPanel\n     */\n    GradingPanel.prototype.expandPanel = function() {\n        this.getPanelElement().removeClass('collapsed');\n    };\n\n    /**\n     * Register event listeners for the grade panel.\n     *\n     * @method registerEventListeners\n     */\n    GradingPanel.prototype.registerEventListeners = function() {\n        var docElement = $(document);\n        var region = $(this._region);\n        // Add an event listener to prevent form submission when pressing enter key.\n        region.on('submit', 'form', function(e) {\n            e.preventDefault();\n        });\n\n        docElement.on('next-user', this._getNextUser.bind(this));\n        docElement.on('session-changed', this._refreshGradingPanel.bind(this));\n        docElement.on('save-changes', this._submitForm.bind(this));\n        docElement.on('save-and-show-next', this._handleSaveAndShowNext.bind(this));\n        docElement.on('reset', this._resetForm.bind(this));\n\n        docElement.on('save-form-state', this._saveFormState.bind(this));\n\n        docElement.on(GradingEvents.COLLAPSE_GRADE_PANEL, function() {\n            this.collapsePanel();\n        }.bind(this));\n\n        // We should expand if the review panel is collapsed.\n        docElement.on(GradingEvents.COLLAPSE_REVIEW_PANEL, function() {\n            this.expandPanel();\n        }.bind(this));\n\n        docElement.on(GradingEvents.EXPAND_GRADE_PANEL, function() {\n            this.expandPanel();\n        }.bind(this));\n    };\n\n    return GradingPanel;\n});\n"],"names":["define","$","Y","notification","templates","fragment","ajax","str","checker","GradingEvents","Event","GradingPanel","selector","this","_regionSelector","_region","_userCache","registerEventListeners","prototype","_lastUserId","_lastSession","nextUserId","nextUser","_niceReplaceNodeContents","node","html","js","promise","Deferred","fadeOut","replaceNodeContents","fadeIn","resolve","_saveFormState","checked","prop","val","_submitForm","event","form","find","show","trigger","notifyFormSubmitAjax","data","serialize","otopoid","attr","itemsComments","each","push","id","value","call","methodname","args","otopo","userid","session","jsonformdata","JSON","stringify","itemscomments","done","_handleFormSubmissionResponse","bind","fail","exception","formdata","response","length","document","get_strings","key","component","strs","alert","use","M","core_formchangechecker","reset_form_dirty_state","hide","_resetForm","e","_refreshGradingPanel","_addPopoutButtons","region","render","closest","addClass","parent","append","on","_togglePopout","preventDefault","container","target","hasClass","removeClass","submissiondata","callbackUserLoaded","arguments","undefined","contextid","window","util","js_pending","params","loadFragment","saveFormState","js_complete","_getNextUser","_handleSaveAndShowNext","getPanelElement","collapsePanel","expandPanel","docElement","COLLAPSE_GRADE_PANEL","COLLAPSE_REVIEW_PANEL","EXPAND_GRADE_PANEL"],"mappings":"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"}