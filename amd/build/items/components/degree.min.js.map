{"version":3,"file":"degree.min.js","sources":["../../../src/items/components/degree.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Items vue degree.\n *\n * @copyright   2024 Nantes Universit√© <support-tice@univ-nantes.fr> (Commissioner)\n * @copyright   2024 E-learning Touch' <contact@elearningtouch.com> (Maintainer)\n * @copyright   2022 Kosmos <moodle@kosmos.fr> (Former maintainer)\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n    'mod_otopo/items/store',\n    'mod_otopo/items/ajax',\n    'mod_otopo/utils',\n    'core/log'\n], function(\n    store,\n    ajax,\n    utils,\n    Log\n) {\n    return {\n        props: {\n            item: {\n                type: Object\n            },\n            itemIndex: {\n                type: Number,\n            },\n            degree: {\n                type: Object\n            },\n            index: {\n                type: Number\n            }\n        },\n        data: function() {\n            return {\n                errors: [],\n                strings: this.$root.$data.strings,\n                hasOtopo: this.$root.$data.hasOtopo,\n                cmid: this.$root.$data.cmid,\n                processChange: utils.debounce(() => this.saveDegree()),\n                validated: false,\n                creationPending: false,\n                collapsed: false,\n                state: this.$root.$data.state\n            };\n        },\n        mounted: function() {\n            this.$refs.name.focus();\n        },\n        methods: {\n            deleteDegree(e) {\n                e.preventDefault();\n                if (!this.hasOtopo) {\n                    store.deleteDegreeFromItem(this.item, this.index);\n                    ajax.deleteDegree(this.degree.id, this.cmid);\n                }\n            },\n            saveDegree() {\n                this.validated = true;\n                if (this.$refs.formDegree.checkValidity()) {\n                    const degree = {...this.degree};\n                    if (degree.id) {\n                        ajax.editDegree(degree, this.cmid);\n                    } else {\n                        if (!this.creationPending) {\n                            this.creationPending = true;\n                            delete degree.id;\n                            ajax.createDegree(this.item.id, degree, this.cmid).then((degreeId) => {\n                                this.degree.id = degreeId;\n                                this.creationPending = false;\n                                return true;\n                            }).catch(Log.error);\n                        }\n                    }\n                }\n            },\n            startDrag(evt, itemIndex, index) {\n                if (!this.hasOtopo) {\n                    evt.dataTransfer.dropEffect = 'move';\n                    evt.dataTransfer.effectAllowed = 'move';\n                    evt.dataTransfer.setData('degreeIndex', index);\n                    evt.dataTransfer.setData('itemIndex', itemIndex);\n                    store.startDraggingDegree();\n                }\n            },\n            endDrag() {\n                store.stopDraggingDegree();\n            },\n            onDrop(evt, before) {\n                evt.preventDefault();\n                if (!this.hasOtopo) {\n                    const degreeIndex = parseInt(evt.dataTransfer.getData('degreeIndex'));\n                    const itemIndex = parseInt(evt.dataTransfer.getData('itemIndex'));\n                    const testDegreeIndex = before ? degreeIndex + 1 : degreeIndex;\n                    const testIndex = before ? this.index : this.index + 1;\n                    if ((itemIndex === this.itemIndex && degreeIndex != this.index && testDegreeIndex != testIndex)\n                       || itemIndex !== this.itemIndex) {\n                        var deletedDegree = store.deleteDegreeFromItem(this.$root.$data.state.items[itemIndex], degreeIndex);\n                        deletedDegree.ord = before ? this.degree.ord : this.degree.ord + 1;\n                        var degreesToPersist = store.addDegreeToItemAfter(this.index, this.item, deletedDegree);\n                        degreesToPersist.forEach((degree) => {\n                            if (degree.id) {\n                                ajax.editDegree(degree, this.cmid);\n                            }\n                        });\n                        if (deletedDegree.id) {\n                            if (itemIndex !== this.itemIndex) {\n                                ajax.deleteDegree(deletedDegree.id, this.cmid);\n                                var deletedDegreeToCreate = {...deletedDegree};\n                                delete deletedDegreeToCreate.id;\n                                ajax.createDegree(this.item.id, deletedDegreeToCreate, this.cmid).then((degreeId) => {\n                                    store.degreeCreated(deletedDegree, degreeId);\n                                    return true;\n                                }).catch(Log.error);\n                            } else {\n                                ajax.editDegree(deletedDegree, this.cmid);\n                            }\n                        }\n                    }\n                }\n            },\n            collapse(e) {\n                e.preventDefault();\n                this.collapsed = !this.collapsed;\n            }\n        },\n        computed: {\n            isDragging() {\n                return this.state.draggingDegree;\n            }\n        },\n        template: `\n            <div class=\"degree\">\n                <div\n                    class=\"drop-zone\"\n                    v-bind:class=\"{'bg-otopo-light': isDragging}\"\n                    @dragover.prevent\n                    @dragenter.prevent\n                    @drop=\"onDrop($event, true)\">\n                </div>\n                <form ref=\"formDegree\" v-bind:class=\"{ 'was-validated': validated }\">\n                    <div\n                        class=\"row border rounded bg-white mb-2 pt-2\"\n                    >\n                        <div\n                            class=\"col-md-12\"\n                            draggable\n                            @dragstart=\"startDrag($event, itemIndex, index)\"\n                            @dragend=\"endDrag\"\n                        >\n                            <a class=\"dropdown-toggle nav-link drag-title\" href=\"#\" v-on:click=\"collapse\">\n                                <i class=\"icon fa fa-arrows\"></i>\n                                <label\n                                    class=\"font-weight-bold text-dark\"\n                                    :for=\"'item_' + itemIndex + '_degree_name_' + index\"\n                                >\n                                    {{strings.degree}} {{index+1}}\n                                </label>\n                            </a>\n                        </div>\n                        <div class=\"col-md-9\" v-if=\"!collapsed\">\n                            <div class=\"input-group mb-3\">\n                                <input\n                                    v-model=\"degree.name\"\n                                    class=\"form-control\"\n                                    ref=\"name\"\n                                    type=\"text\"\n                                    maxlength=\"255\"\n                                    :title=\"strings.stringlimit255\"\n                                    :id=\"'item_' + itemIndex + '_degree_name_' + index\"\n                                    @input=\"processChange()\"\n                                    :disabled=\"creationPending\"\n                                    required\n                                >\n                            </div>\n                            <div class=\"input-group mb-3\">\n                                <textarea\n                                    v-model=\"degree.description\"\n                                    class=\"form-control\"\n                                    type=\"text\" :id=\"'item_' + itemIndex + '_degree_description_' + index\"\n                                    @input=\"processChange()\"\n                                    :disabled=\"creationPending\"\n                                ></textarea>\n                            </div>\n                        </div>\n                        <div class=\"col-md-3\" v-if=\"!collapsed\">\n                            <label\n                                class=\"font-weight-bold text-dark\"\n                                :for=\"'item_' + itemIndex + '_degree_grade_' + index\"\n                            >\n                                {{strings.degreegrade}}\n                            </label>\n                            <div class=\"input-group mb-3\">\n                                <input\n                                    v-model=\"degree.grade\"\n                                    class=\"form-control\"\n                                    type=\"text\" :id=\"'item_' + itemIndex + '_degree_grade_' + index\"\n                                    @input=\"processChange()\"\n                                    :disabled=\"creationPending || hasOtopo\"\n                                    required\n                                >\n                            </div>\n                        </div>\n                        <div class=\"col-md-12\" v-if=\"!collapsed\">\n                            <a\n                            v-on:click=\"deleteDegree\"\n                            class=\"mb-3 d-inline-block\"\n                            v-bind:class=\"{'disabled': hasOtopo}\"\n                            href=\"#\" >- {{ strings.deletedegree }}\n                            </a>\n                        </div>\n                    </div>\n                </form>\n                <div\n                    class=\"drop-zone\"\n                    v-bind:class=\"{'bg-otopo-light': isDragging}\"\n                    @dragover.prevent\n                    @dragenter.prevent\n                    @drop=\"onDrop($event, false)\">\n                </div>\n            </div>\n        `\n    };\n});\n"],"names":["define","store","ajax","utils","Log","props","item","type","Object","itemIndex","Number","degree","index","data","errors","strings","this","$root","$data","hasOtopo","cmid","processChange","debounce","saveDegree","validated","creationPending","collapsed","state","mounted","$refs","name","focus","methods","deleteDegree","e","preventDefault","deleteDegreeFromItem","id","formDegree","checkValidity","editDegree","createDegree","then","degreeId","catch","error","startDrag","evt","dataTransfer","dropEffect","effectAllowed","setData","startDraggingDegree","endDrag","stopDraggingDegree","onDrop","before","degreeIndex","parseInt","getData","testDegreeIndex","testIndex","deletedDegree","items","ord","addDegreeToItemAfter","forEach","deletedDegreeToCreate","degreeCreated","collapse","computed","isDragging","draggingDegree","template"],"mappings":"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"}