{"version":3,"file":"grading_navigation.min.js","sources":["../src/grading_navigation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript to handle changing users via the user selector in the header.\n *\n * @module     mod_assign/grading_navigation\n * @copyright  2016 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      3.1\n */\ndefine(['jquery', 'core/notification', 'core/str', 'core/form-autocomplete',\n        'core/ajax', 'mod_assign/grading_form_change_checker'],\n       function($, notification, str, autocomplete, ajax, checker) {\n\n    /**\n     * GradingNavigation class.\n     *\n     * @class GradingNavigation\n     * @param {String} selector The selector for the page region containing the user navigation.\n     */\n    var GradingNavigation = function(selector) {\n        this._regionSelector = selector;\n        this._region = $(selector);\n        this._users = [];\n        this._lastXofYUpdate = 0;\n        this._firstLoadUsers = true;\n\n        // Get the current user list from a webservice.\n        this._loadAllUsers();\n\n        // We do not allow navigation while ajax requests are pending.\n        // Attach listeners to the select and arrow buttons.\n\n        this._region.find('[data-action=\"previous-user\"]').on('click', this._handlePreviousUser.bind(this));\n        this._region.find('[data-action=\"next-user\"]').on('click', this._handleNextUser.bind(this));\n        this._region.find('[data-action=\"change-user\"]').on('change', this._handleChangeUser.bind(this));\n\n        $(document).on('user-changed', this._refreshSelector.bind(this));\n        $(document).on('done-saving-show-next', this._handleNextUser.bind(this));\n\n        var userid = $('[data-region=\"grading-navigation-panel\"]').data('first-userid');\n        if (userid) {\n            this._selectUserById(userid);\n        }\n\n        str.get_string('changeuser', 'mod_assign').done(function(s) {\n                autocomplete.enhance('[data-action=change-user]', false, 'mod_otopo/participant_selector', s);\n            }\n        ).fail(notification.exception);\n\n        $(document).bind(\"start-loading-user\", function() {\n            this._isLoading = true;\n        }.bind(this));\n        $(document).bind(\"finish-loading-user\", function() {\n            this._isLoading = false;\n        }.bind(this));\n    };\n\n    /** @type {Boolean} Boolean tracking active ajax requests. */\n    GradingNavigation.prototype._isLoading = false;\n\n    /** @type {String} Selector for the page region containing the user navigation. */\n    GradingNavigation.prototype._regionSelector = null;\n\n    /** @type {JQuery} JQuery node for the page region containing the user navigation. */\n    GradingNavigation.prototype._region = null;\n\n    /**\n     * Load the list of all users for this assignment.\n     *\n     * @private\n     * @method _loadAllUsers\n     * @return {Boolean} True if the user list was fetched.\n     */\n    GradingNavigation.prototype._loadAllUsers = function() {\n        var select = this._region.find('[data-action=change-user]');\n        var otopoid = select.attr('data-otopoid');\n\n        ajax.call([{\n            methodname: 'mod_otopo_list_participants',\n            args: {otopo: otopoid, filter: ''},\n            done: this._usersLoaded.bind(this),\n            fail: notification.exception\n        }]);\n        return true;\n    };\n\n    /**\n     * Call back to rebuild the user selector and x of y info when the user list is updated.\n     *\n     * @private\n     * @method _usersLoaded\n     * @param {Array} users\n     */\n    GradingNavigation.prototype._usersLoaded = function(users) {\n        this._firstLoadUsers = false;\n        this._users = users;\n        if (this._users.length) {\n            this._refreshCount();\n        } else {\n            this._selectNoUser();\n        }\n        this._triggerNextUserEvent();\n    };\n    /**\n     * Select no users, because no users match the filters.\n     *\n     * @private\n     * @method _selectNoUser\n     */\n    GradingNavigation.prototype._selectNoUser = function() {\n        // Detect unsaved changes, and offer to save them - otherwise change user right now.\n        if (this._isLoading) {\n            return;\n        }\n        if (checker.checkFormForChanges('[data-region=\"grade-panel\"] .gradeform')) {\n            // Form has changes, so we need to confirm before switching users.\n            str.get_strings([\n                {key: 'unsavedchanges', component: 'mod_assign'},\n                {key: 'unsavedchangesquestion', component: 'mod_assign'},\n                {key: 'saveandcontinue', component: 'mod_assign'},\n                {key: 'cancel', component: 'core'},\n            ]).done(function(strs) {\n                notification.confirm(strs[0], strs[1], strs[2], strs[3], function() {\n                    $(document).trigger('save-changes', -1);\n                });\n            });\n        } else {\n            $(document).trigger('user-changed', -1);\n        }\n    };\n\n    /**\n     * Select the specified user by id.\n     *\n     * @private\n     * @method _selectUserById\n     * @param {Number} userid\n     */\n    GradingNavigation.prototype._selectUserById = function(userid) {\n        var select = this._region.find('[data-action=change-user]');\n        var useridnumber = parseInt(userid, 10);\n\n        // Detect unsaved changes, and offer to save them - otherwise change user right now.\n        if (this._isLoading) {\n            return;\n        }\n        if (checker.checkFormForChanges('[data-region=\"grade-panel\"] .gradeform')) {\n            // Form has changes, so we need to confirm before switching users.\n            str.get_strings([\n                {key: 'unsavedchanges', component: 'mod_assign'},\n                {key: 'unsavedchangesquestion', component: 'mod_assign'},\n                {key: 'saveandcontinue', component: 'mod_assign'},\n                {key: 'cancel', component: 'core'},\n            ]).done(function(strs) {\n                notification.confirm(strs[0], strs[1], strs[2], strs[3], function() {\n                    $(document).trigger('save-changes', useridnumber);\n                });\n            });\n        } else {\n            select.attr('data-selected', userid);\n\n            if (!isNaN(useridnumber) && useridnumber > 0) {\n                $(document).trigger('user-changed', userid);\n            }\n        }\n    };\n\n    /**\n     * Change to the previous user in the grading list.\n     *\n     * @private\n     * @method _handlePreviousUser\n     * @param {Event} e\n     */\n    GradingNavigation.prototype._handlePreviousUser = function(e) {\n        e.preventDefault();\n        var select = this._region.find('[data-action=change-user]');\n        var currentUserId = select.attr('data-selected');\n        var i = 0;\n        var currentIndex = 0;\n\n        for (i = 0; i < this._users.length; i++) {\n            if (this._users[i].id == currentUserId) {\n                currentIndex = i;\n                break;\n            }\n        }\n\n        var count = this._users.length;\n        var newIndex = (currentIndex - 1);\n        if (newIndex < 0) {\n            newIndex = count - 1;\n        }\n\n        if (count) {\n            this._selectUserById(this._users[newIndex].id);\n        }\n    };\n\n    /**\n     * Change to the next user in the grading list.\n     *\n     * @param {Event} e\n     * @param {Boolean} saved Has the form already been saved? Skips checking for changes if true.\n     */\n    GradingNavigation.prototype._handleNextUser = function(e, saved) {\n        e.preventDefault();\n        var select = this._region.find('[data-action=change-user]');\n        var currentUserId = select.attr('data-selected');\n        var i = 0;\n        var currentIndex = 0;\n\n        for (i = 0; i < this._users.length; i++) {\n            if (this._users[i].id == currentUserId) {\n                currentIndex = i;\n                break;\n            }\n        }\n\n        var count = this._users.length;\n        var newIndex = (currentIndex + 1) % count;\n\n        if (saved && count) {\n            // If we've already saved the grade, skip checking if we've made any changes.\n            var userid = this._users[newIndex].id;\n            var useridnumber = parseInt(userid, 10);\n            select.attr('data-selected', userid);\n            if (!isNaN(useridnumber) && useridnumber > 0) {\n                $(document).trigger('user-changed', userid);\n            }\n        } else if (count) {\n            this._selectUserById(this._users[newIndex].id);\n        }\n    };\n\n    /**\n     * Set count string. This method only sets the value for the last time it was ever called to deal\n     * with promises that return in a non-predictable order.\n     *\n     * @private\n     * @method _setCountString\n     * @param {Number} x\n     * @param {Number} y\n     */\n    GradingNavigation.prototype._setCountString = function(x, y) {\n        var updateNumber = 0;\n        this._lastXofYUpdate++;\n        updateNumber = this._lastXofYUpdate;\n\n        var param = {x: x, y: y};\n        str.get_string('xofy', 'mod_assign', param).done(function(s) {\n            if (updateNumber == this._lastXofYUpdate) {\n                this._region.find('[data-region=\"user-count-summary\"]').text(s);\n            }\n        }.bind(this)).fail(notification.exception);\n    };\n\n    /**\n     * Rebuild the x of y string.\n     *\n     * @private\n     * @method _refreshCount\n     */\n    GradingNavigation.prototype._refreshCount = function() {\n        var select = this._region.find('[data-action=change-user]');\n        var userid = select.attr('data-selected');\n        var i = 0;\n        var currentIndex = 0;\n\n        if (isNaN(userid) || userid <= 0) {\n            this._region.find('[data-region=\"user-count\"]').hide();\n        } else {\n            this._region.find('[data-region=\"user-count\"]').show();\n\n            for (i = 0; i < this._users.length; i++) {\n                if (this._users[i].id == userid) {\n                    currentIndex = i;\n                    break;\n                }\n            }\n            var count = this._users.length;\n            if (count) {\n                currentIndex += 1;\n            }\n            this._setCountString(currentIndex, count);\n            // Update window URL\n            if (currentIndex > 0) {\n                var url = new URL(window.location);\n                url.searchParams.set('user', userid);\n                // We do this so a browser refresh will return to the same user.\n                window.history.replaceState({}, \"\", url);\n            }\n        }\n    };\n\n    /**\n     * Respond to a user-changed event by updating the selector.\n     *\n     * @private\n     * @method _refreshSelector\n     * @param {Event} event\n     * @param {String} userid\n     */\n    GradingNavigation.prototype._refreshSelector = function(event, userid) {\n        var select = this._region.find('[data-action=change-user]');\n        userid = parseInt(userid, 10);\n\n        if (!isNaN(userid) && userid > 0) {\n            select.attr('data-selected', userid);\n        }\n        this._refreshCount();\n    };\n\n    /**\n     * Trigger the next user event depending on the number of filtered users\n     *\n     * @private\n     * @method _triggerNextUserEvent\n     */\n    GradingNavigation.prototype._triggerNextUserEvent = function() {\n        if (this._users.length > 1) {\n            $(document).trigger('next-user', {nextUserId: null, nextUser: true});\n        } else {\n            $(document).trigger('next-user', {nextUser: false});\n        }\n    };\n\n    /**\n     * Change to a different user in the grading list.\n     *\n     * @private\n     * @method _handleChangeUser\n     */\n    GradingNavigation.prototype._handleChangeUser = function() {\n        var select = this._region.find('[data-action=change-user]');\n        var userid = parseInt(select.val(), 10);\n\n        if (this._isLoading) {\n            return;\n        }\n        if (checker.checkFormForChanges('[data-region=\"grade-panel\"] .gradeform')) {\n            // Form has changes, so we need to confirm before switching users.\n            str.get_strings([\n                {key: 'unsavedchanges', component: 'mod_assign'},\n                {key: 'unsavedchangesquestion', component: 'mod_assign'},\n                {key: 'saveandcontinue', component: 'mod_assign'},\n                {key: 'cancel', component: 'core'},\n            ]).done(function(strs) {\n                notification.confirm(strs[0], strs[1], strs[2], strs[3], function() {\n                    $(document).trigger('save-changes', userid);\n                });\n            });\n        } else {\n            if (!isNaN(userid) && userid > 0) {\n                select.attr('data-selected', userid);\n\n                $(document).trigger('user-changed', userid);\n            }\n        }\n    };\n\n    return GradingNavigation;\n});\n"],"names":["define","$","notification","str","autocomplete","ajax","checker","GradingNavigation","selector","this","_regionSelector","_region","_users","_lastXofYUpdate","_firstLoadUsers","_loadAllUsers","find","on","_handlePreviousUser","bind","_handleNextUser","_handleChangeUser","document","_refreshSelector","userid","data","_selectUserById","get_string","done","s","enhance","fail","exception","_isLoading","prototype","otopoid","attr","call","methodname","args","otopo","filter","_usersLoaded","users","length","_refreshCount","_selectNoUser","_triggerNextUserEvent","checkFormForChanges","get_strings","key","component","strs","confirm","trigger","select","useridnumber","parseInt","isNaN","e","preventDefault","currentUserId","i","currentIndex","id","count","newIndex","saved","_setCountString","x","y","updateNumber","text","hide","show","url","URL","window","location","searchParams","set","history","replaceState","event","nextUserId","nextUser","val"],"mappings":"AAuBAA,OAAM,+BAAC,CAAC,SAAU,oBAAqB,WAAY,yBAC3C,YAAa,2CACd,SAASC,EAAGC,EAAcC,EAAKC,EAAcC,EAAMC,GAQtD,IAAIC,EAAoB,SAASC,GAC7BC,KAAKC,gBAAkBF,EACvBC,KAAKE,QAAUV,EAAEO,GACjBC,KAAKG,OAAS,GACdH,KAAKI,gBAAkB,EACvBJ,KAAKK,iBAAkB,EAGvBL,KAAKM,gBAKLN,KAAKE,QAAQK,KAAK,iCAAiCC,GAAG,QAASR,KAAKS,oBAAoBC,KAAKV,OAC7FA,KAAKE,QAAQK,KAAK,6BAA6BC,GAAG,QAASR,KAAKW,gBAAgBD,KAAKV,OACrFA,KAAKE,QAAQK,KAAK,+BAA+BC,GAAG,SAAUR,KAAKY,kBAAkBF,KAAKV,OAE1FR,EAAEqB,UAAUL,GAAG,eAAgBR,KAAKc,iBAAiBJ,KAAKV,OAC1DR,EAAEqB,UAAUL,GAAG,wBAAyBR,KAAKW,gBAAgBD,KAAKV,OAElE,IAAIe,EAASvB,EAAE,4CAA4CwB,KAAK,gBAC5DD,GACAf,KAAKiB,gBAAgBF,GAGzBrB,EAAIwB,WAAW,aAAc,cAAcC,MAAK,SAASC,GACjDzB,EAAa0B,QAAQ,6BAA6B,EAAO,iCAAkCD,EAC/F,IACFE,KAAK7B,EAAa8B,WAEpB/B,EAAEqB,UAAUH,KAAK,qBAAsB,WACnCV,KAAKwB,YAAa,CACtB,EAAEd,KAAKV,OACPR,EAAEqB,UAAUH,KAAK,sBAAuB,WACpCV,KAAKwB,YAAa,CACtB,EAAEd,KAAKV,MACX,EAkTA,OA/SAF,EAAkB2B,UAAUD,YAAa,EAGzC1B,EAAkB2B,UAAUxB,gBAAkB,KAG9CH,EAAkB2B,UAAUvB,QAAU,KAStCJ,EAAkB2B,UAAUnB,cAAgB,WACxC,IACIoB,EADS1B,KAAKE,QAAQK,KAAK,6BACVoB,KAAK,gBAQ1B,OANA/B,EAAKgC,KAAK,CAAC,CACPC,WAAY,8BACZC,KAAM,CAACC,MAAOL,EAASM,OAAQ,IAC/Bb,KAAMnB,KAAKiC,aAAavB,KAAKV,MAC7BsB,KAAM7B,EAAa8B,cAEhB,CACX,EASAzB,EAAkB2B,UAAUQ,aAAe,SAASC,GAChDlC,KAAKK,iBAAkB,EACvBL,KAAKG,OAAS+B,EACVlC,KAAKG,OAAOgC,OACZnC,KAAKoC,gBAELpC,KAAKqC,gBAETrC,KAAKsC,uBACT,EAOAxC,EAAkB2B,UAAUY,cAAgB,WAEpCrC,KAAKwB,aAGL3B,EAAQ0C,oBAAoB,0CAE5B7C,EAAI8C,YAAY,CACZ,CAACC,IAAK,iBAAkBC,UAAW,cACnC,CAACD,IAAK,yBAA0BC,UAAW,cAC3C,CAACD,IAAK,kBAAmBC,UAAW,cACpC,CAACD,IAAK,SAAUC,UAAW,UAC5BvB,MAAK,SAASwB,GACblD,EAAamD,QAAQD,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAAI,WACrDnD,EAAEqB,UAAUgC,QAAQ,gBAAiB,EACzC,GACJ,IAEArD,EAAEqB,UAAUgC,QAAQ,gBAAiB,GAE7C,EASA/C,EAAkB2B,UAAUR,gBAAkB,SAASF,GACnD,IAAI+B,EAAS9C,KAAKE,QAAQK,KAAK,6BAC3BwC,EAAeC,SAASjC,EAAQ,IAGhCf,KAAKwB,aAGL3B,EAAQ0C,oBAAoB,0CAE5B7C,EAAI8C,YAAY,CACZ,CAACC,IAAK,iBAAkBC,UAAW,cACnC,CAACD,IAAK,yBAA0BC,UAAW,cAC3C,CAACD,IAAK,kBAAmBC,UAAW,cACpC,CAACD,IAAK,SAAUC,UAAW,UAC5BvB,MAAK,SAASwB,GACblD,EAAamD,QAAQD,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAAI,WACrDnD,EAAEqB,UAAUgC,QAAQ,eAAgBE,EACxC,GACJ,KAEAD,EAAOnB,KAAK,gBAAiBZ,IAExBkC,MAAMF,IAAiBA,EAAe,GACvCvD,EAAEqB,UAAUgC,QAAQ,eAAgB9B,IAGhD,EASAjB,EAAkB2B,UAAUhB,oBAAsB,SAASyC,GACvDA,EAAEC,iBACF,IACIC,EADSpD,KAAKE,QAAQK,KAAK,6BACJoB,KAAK,iBAC5B0B,EAAI,EACJC,EAAe,EAEnB,IAAKD,EAAI,EAAGA,EAAIrD,KAAKG,OAAOgC,OAAQkB,IAChC,GAAIrD,KAAKG,OAAOkD,GAAGE,IAAMH,EAAe,CACpCE,EAAeD,EACf,KACJ,CAGJ,IAAIG,EAAQxD,KAAKG,OAAOgC,OACpBsB,EAAYH,EAAe,EAC3BG,EAAW,IACXA,EAAWD,EAAQ,GAGnBA,GACAxD,KAAKiB,gBAAgBjB,KAAKG,OAAOsD,GAAUF,GAEnD,EAQAzD,EAAkB2B,UAAUd,gBAAkB,SAASuC,EAAGQ,GACtDR,EAAEC,iBACF,IAAIL,EAAS9C,KAAKE,QAAQK,KAAK,6BAC3B6C,EAAgBN,EAAOnB,KAAK,iBAC5B0B,EAAI,EACJC,EAAe,EAEnB,IAAKD,EAAI,EAAGA,EAAIrD,KAAKG,OAAOgC,OAAQkB,IAChC,GAAIrD,KAAKG,OAAOkD,GAAGE,IAAMH,EAAe,CACpCE,EAAeD,EACf,KACJ,CAGJ,IAAIG,EAAQxD,KAAKG,OAAOgC,OACpBsB,GAAYH,EAAe,GAAKE,EAEpC,GAAIE,GAASF,EAAO,CAEhB,IAAIzC,EAASf,KAAKG,OAAOsD,GAAUF,GAC/BR,EAAeC,SAASjC,EAAQ,IACpC+B,EAAOnB,KAAK,gBAAiBZ,IACxBkC,MAAMF,IAAiBA,EAAe,GACvCvD,EAAEqB,UAAUgC,QAAQ,eAAgB9B,EAE5C,MAAWyC,GACPxD,KAAKiB,gBAAgBjB,KAAKG,OAAOsD,GAAUF,GAEnD,EAWAzD,EAAkB2B,UAAUkC,gBAAkB,SAASC,EAAGC,GACtD,IAAIC,EACJ9D,KAAKI,kBACL0D,EAAe9D,KAAKI,gBAGpBV,EAAIwB,WAAW,OAAQ,aADX,CAAC0C,EAAGA,EAAGC,EAAGA,IACsB1C,KAAK,SAASC,GAClD0C,GAAgB9D,KAAKI,iBACrBJ,KAAKE,QAAQK,KAAK,sCAAsCwD,KAAK3C,EAErE,EAAEV,KAAKV,OAAOsB,KAAK7B,EAAa8B,UACpC,EAQAzB,EAAkB2B,UAAUW,cAAgB,WACxC,IACIrB,EADSf,KAAKE,QAAQK,KAAK,6BACXoB,KAAK,iBACrB0B,EAAI,EACJC,EAAe,EAEnB,GAAIL,MAAMlC,IAAWA,GAAU,EAC3Bf,KAAKE,QAAQK,KAAK,8BAA8ByD,WAC7C,CAGH,IAFAhE,KAAKE,QAAQK,KAAK,8BAA8B0D,OAE3CZ,EAAI,EAAGA,EAAIrD,KAAKG,OAAOgC,OAAQkB,IAChC,GAAIrD,KAAKG,OAAOkD,GAAGE,IAAMxC,EAAQ,CAC7BuC,EAAeD,EACf,KACJ,CAEJ,IAAIG,EAAQxD,KAAKG,OAAOgC,OAMxB,GALIqB,IACAF,GAAgB,GAEpBtD,KAAK2D,gBAAgBL,EAAcE,GAE/BF,EAAe,EAAG,CAClB,IAAIY,EAAM,IAAIC,IAAIC,OAAOC,UACzBH,EAAII,aAAaC,IAAI,OAAQxD,GAE7BqD,OAAOI,QAAQC,aAAa,GAAI,GAAIP,EACxC,CACJ,CACJ,EAUApE,EAAkB2B,UAAUX,iBAAmB,SAAS4D,EAAO3D,GAC3D,IAAI+B,EAAS9C,KAAKE,QAAQK,KAAK,6BAC/BQ,EAASiC,SAASjC,EAAQ,KAErBkC,MAAMlC,IAAWA,EAAS,GAC3B+B,EAAOnB,KAAK,gBAAiBZ,GAEjCf,KAAKoC,eACT,EAQAtC,EAAkB2B,UAAUa,sBAAwB,WAC5CtC,KAAKG,OAAOgC,OAAS,EACrB3C,EAAEqB,UAAUgC,QAAQ,YAAa,CAAC8B,WAAY,KAAMC,UAAU,IAE9DpF,EAAEqB,UAAUgC,QAAQ,YAAa,CAAC+B,UAAU,GAEpD,EAQA9E,EAAkB2B,UAAUb,kBAAoB,WAC5C,IAAIkC,EAAS9C,KAAKE,QAAQK,KAAK,6BAC3BQ,EAASiC,SAASF,EAAO+B,MAAO,IAEhC7E,KAAKwB,aAGL3B,EAAQ0C,oBAAoB,0CAE5B7C,EAAI8C,YAAY,CACZ,CAACC,IAAK,iBAAkBC,UAAW,cACnC,CAACD,IAAK,yBAA0BC,UAAW,cAC3C,CAACD,IAAK,kBAAmBC,UAAW,cACpC,CAACD,IAAK,SAAUC,UAAW,UAC5BvB,MAAK,SAASwB,GACblD,EAAamD,QAAQD,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAAI,WACrDnD,EAAEqB,UAAUgC,QAAQ,eAAgB9B,EACxC,GACJ,KAEKkC,MAAMlC,IAAWA,EAAS,IAC3B+B,EAAOnB,KAAK,gBAAiBZ,GAE7BvB,EAAEqB,UAAUgC,QAAQ,eAAgB9B,IAGhD,EAEOjB,CACX"}